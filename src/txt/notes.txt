//arguments
//返回函数所有的参数，是一个类数组对象，可以使用array.from和...扩展符转换为数组
//arguments只有length属性和索引
function arg(a,b){
    console.log(arguments)
    return a+b;
}
arg(3,4)

//箭头函数
//简化普通函数，和普通函数的区别在于this不一样
const sum = (a,b) => a+b;
sum(3,4)
const sum1 = a => b => a+b;
sum1(a)(b)
//上面的两个箭头函数等价于下面的两个普通函数
function sum2(a,b){
    return a+b
}
sum2(3,4)
function sum3(a){
    return function sum4(b){
        return a+b
    }
}
sum3(3)(4)

//声明前置
//在使用var声明变量时具有变量提升，函数声明时也有函数提升。注意let 和 const不会有变量提升
//函数只有使用function fn()这种方式时才具有函数提升
console.log(a)
var a = 4;

fn()
function fn(){
    let a =4
    return a;
}
//等价于
var a;
console.log(a)
a = 4

//作用域链
//函数在执行过程中，先从自身内部去找，如果找不到，再从创建当前函数所在的作用去找，以此往上直到全局作用域。
// let a = 0
// function foo(){
//     let a = 1
//     bar()
// }
// function bar(){
//     console.log(a)//找到的是那个地方的a？ 找的是全局的a，输出0.
// }

// foo()
// let a = 0
// function foo(){
//     let a = 1
//     bar()
//     function bar(){
//         console.log(a)//找到的是上级的foo的a输出1
//     }
// }
// foo()

// let a = 0
// function foo(){
//     bar()
//     var a = 1
//     function bar(){
//         console.log(a)//找到的是上级foo的a由于var有变量提升所以输出undifined
//     }
// }
// foo()

// var a = 1
// function fn1(){
//     function fn2(){
//         console.log(a)
//     }
//     function fn3(){
//         var a = 4
//         fn2()
//     }
//     var a = 2
//     return fn3
// }

// var fn = fn1
// fn() //输出为2，调用fn相当于调用fn2，在fn2输出a的时候，var a =2已经return了。

// var a = 1
// function fn1(){
//     function fn3(){
//         var a = 4
//         fn2()
//     }
//     var a = 2
//     return fn3
// }

// function fn2(){
//     console.log(a)//输出为1，调用fn相当于调用fn3，fn3调用了fn2，fn2在全局声明了，所以输出为1
// }

// var fn = fn1
// fn()

var a =1
function fn1(){
    function fn3(){
        function fn2(){
            console.log(a)//输出为undifined，调用fn1=fn1，调用fn1=fn3，调用fn3=fn2，fn2里没有声明a找他上级作用域，fn3里var a = 4，因为有声明前置，所以a等于undeifend
        }
        fn2()
        var a =4
    }
   var a = 2
   return fn3 
}

var fn = fn1
fn()

//立即执行函数
//作用：立即执行函数，特殊用途用于隔绝作用域
(function(){
    let a = 3
    let b = 4
    return a+b;
})()

//递归:自己调用自己，设置种植条件
//优点：高效简洁，缺点：在计算时需要多次重复运算
//使用递归实现阶乘
function fact(n){
    if(n===1) return 1
    return n*fact(n-1)
}
//使用递归实现斐波那契额
function fibonacci(n){
    if(n===1 || n===2) return 1
    return fibonacci(n-1) + fibonacci(n-2)
}

//回调函数:自己调用自己
function callback(name,call){
    return call(name)
}

callback('hello',function(string){
    console.log('hi'+string)
})

//数组，字符串
let str = 'hello'
console.log(str.length) //字符串的长度
console.log(str.charCodeAt(0)) //对应下标为0的字符的ASC码
console.log(str.charAt(0))//对应下标字符为0的字符串位置
console.log(str[0])//对应字符下标为0的字符

let str1 = 'world'
let str2 = str.concat(str1)//字符串的连接

//字符串的查找
let str = 'hello'
str.search('h') //查找对应字符的下标
str.indexOf('e') //查找对应字符的下标
str.lastIndexOf('e') //反查对应字符的下标
str.includes('e') //判断是否含有对应字符，返回true或者false
str.startsWith('h') //判断对应字符串是否以h开头
str.endsWith('o') //判断对应字符串是否以o结尾

//字符串的截取
//字符串操作不会修改原来的字符串
let str = 'hello world'
let sub1 = str.substr(1,3) //第一个是开始位置，下标从0开始，第二个是长度。
let sub2 = str.substring(1,3)//第一个是开始位置，第二个是结束位置(不包含结束位置的字符)
let sub3 = str.slice(1,3)//跟上面的一样

//字符串的其他处理
str.split('')//字符串的分割，把字符串变为数组。
str.trim()//去掉空白字符
str.toUpperCase()//字符串变成大写
str.toLowerCase()//字符串变成小写


//数组方法
//数组的栈方法
let arr = [1,2,3,4,5]
arr.pop()//从数组的尾部拿出去一个东西
arr.push(8)//重新给数组增添一个东西
//数组的队列方法
arr.shift()//从数组的开头拿出去一个东西
arr.unshift(9)//从数组的开头增添一个东西

//任意位置添加，删除(会改变原来的参数)
//参数1.开始索引(插入在前)；2.删除元素的个数，3插入的新元素，可以写多个
//返回：一个由删除元素组成的新数组
arr.splice(1,2)//从1开始删除两个元素，输出结果1，4，5
arr.splice(1,0,'world')//新增一个元素，输出结果1，'world'，4，5
arr.splice(3,1,'hello')//替换一个元素，输出结果1，'world',4,'hello'

//数组的链接方法
//不会改变原来的数组，生成一个新数组.
//concat方法也是实现一个浅拷贝最简单的方法
let arr = [4,5,6]
let arr2 =arr.concat(7)
console.log(arr2)//arr2输出4567，原来的arr数组不变依旧是4，5，6
let str = arr.join('')//把数组变为字符串

//问题，给定一段字符串让他2次或者n次
let arr = 'hello hehuxiao'
let repeatStr = repeatstr(arr)
//重复两次
function repeatstr(str){
    // let result = ''
    // for(let i = 0;i<str.length;i++){
    //     result += str[i] + str[i]
    // }
    // return result
    let result = str.split('')
    for(let key in result){
        result[key] += result[key] + result[key]
    }
    return result.join('')
}
//重复多次
function repeatStr2(str,count=2){
    let result = str.split('')
    for(let i = 0;i<str.length;i++){
        result += str[i].padStart(count,str[i]) //padStart()在头部填充，第一个参数为次数，第二个参数为你需要填充的内容
    }
}

//数组方法
//倒序(revert)，排序(sort)

//倒序，会改变原来的数组
//两种方式实现倒序,第一种使用冒泡排序的方式实现，第二种使用ES6语法
let str = 'hello world'
let arr = str.split('') //不能直接改动字符串。需变成数组才能改变字符串
for(let i = 0;i<arr.length/2;i++){
    let temp = arr[i]
    arr[i] = arr[str.length-1-i]
    arr[str.length-1-i] = temp
}
str = arr.join('')
console.log(str)
//第二种方式
let arr2 = str.split('').reverse().join('')
console.log(arr2)

//排序，会改变原来的数组
//sort默认元素排序是在将元素转换为字符串
//如果直接使用sort，sort方法会将数组里的东西变为UTF-16码来比较
let arr = [1,100,20,35,40,33,21,20]
arr.sort()
console.log(arr) //输出结果为1，100，20，20，21，33，35，40
arr.sort((a,b)=>a-b)
console.log(arr)//1,20,20,21,33,35,40,100

//数组的ES5方法，拓展
//Array.isArray判断一个对象是不是数组
let a = [1,2,3,4,5,-1,-2,-3]
Array.isArray(a)//返回true或者false
//indexOf()用来查找指定字符的下标，找不到返回-1
a.indexOf(5)//4
a.indexOf(6)//-1
//forEach()遍历数组，参数为回调函数，回调函数里的参数为遍历到的对应元素，元素宇浩，数组本身
a.forEach(element => {
    console.log(element)//输出对应的值
});
//every()所有回调函数都返回true的时候才会返回true，否则返回false
a.every(v=>v>0) //返回true或false
//some()只要有一个回调函数返回true结果九位true
a.some(v=>v>0) //返回true或false
//filter()过滤满足条件的元素，构成新数组，原数组不变
a.filter(v=>v>0) //遍历数组，返回满足条件的元素
//map遍历数组，回调函数返回值组成一个新数组返回，新数组索引结构何原数组一致，原数组不变
a.map(v=>v**2)//返回原数组2的指数
//reduce()遍历数组，调用回调函数，将数组元素组合成一个值，初始值可选
//reduce有两个参数，第一个参数可选，第二个参数为初始值
let b = [1,4,3,9]
let result = b.reduce((v1,v2)=>v1+v2)//无初始值的情况
console.log(result)

let result2 = b.reduce((res,v)=>res+v**2,0)//有初始值的情况

//手写filter
function myFilter(arr,fn){
    let newArr = []
    for(let v of arr){
        if(fn(v)) newArr.push(v)
    }
    return newArr
}
//手写map
function myMap(arr,fn){
    let newArr = []
    for(let v of arr){
        newArr.push(fn(v))
    }
    return newArr
}
//手写reduce
function myReduce(arr,fn,initValue){
    let tempArr = [initValue!==undefined?initValue:[]].concat(arr)
    while(tempArr.length>1){
        tempArr.splice(0,2,fn(tempArr[0],tempArr[1]))
    }
    return tempArr[0]
}

//对象，无序的数据集合，由若干个键值对构成
let obj = {
    name:'jirengu',
    age:5,
    sayhello:function(name) {
        console.log(this.name)
    }
}
obj.sayhello()

//属性变为数组
Object.keys(obj)
Object.keys(obj).forEach(key=>console.log(`${key}:${obj[key]}`))//输出对象里的属性和值
delete obj.sayhello() //删除对象的属性

//JSON格式


//Date对象，日期对象
let d = new Date();
d.getTime()//返回当前时间距离1970年1月1日 00：00 对应的毫秒数
d.getDate()//返回当前月份的几号
d.getDay()//返回当前是周几
d.getFullYear()//返回当前年份
d.getMonth()//获取当前月份要加1
d.getHours()//返回小时
d.getMilliseconds()//返回毫秒
d.getMinutes()//返回分钟
d.getSeconds()//返回秒数
//去年的今天是周几？
function lastYearDay(){
    let lastyearday = Date.now()-365*24*3600*1000
    let day = new Date(lastyearday).getDay()
    console.log(day)
}
//距离元旦还剩多少天多是小时多少分多少秒？
function getLeftTime(targetTime){
    let nowTime = Date.now()
    let ttargetTime = new Date(targetTime).getTime()
    let bettwenTime = (Math.abs(nowTime-ttargetTime))/1000
    let day = Math.floor(bettwenTime/(3600*24))
    let left = bettwenTime%(3600*24)
    let hour = Math.floor(left/3600)
    left = left%3600
    let minute = Math.floor(left/60)
    left = left%60
    let seconed = Math.floor(left)
    console.log(targetTime)
    return {day,hour,minute,seconed}
}

let obj = getLeftTime('2020-01-01 00:00:00')
console.log(`举例元旦还有${obj.day}天${obj.hour}时${obj.minute}分
${obj.seconed}秒`)
//格式化旧日期
function formatDate(dateStr){
    let between = parseInt((Date.now()
    -new Date(dateStr).getTime())/1000)
    switch(true){
        case between<60:
            return '刚刚'
        case between<3600:
            return `${parseInt(between/60)}分钟前`
        case between<3600*24:
            return `${parseInt(between/3600)}小时前`
        default:
            return `${parseInt(between/(3600*24))}天前`
    }
}

//math和number
Math.floor()//向下取整
Math.ceil()//向上取整
Math.round()//四舍五入
Math.abs()//绝对值
Math.max()//最大值
Math.min()//最小值
Math.random()//随机数

//深拷贝和浅拷贝
//浅拷贝
let arr = [3,4,5]
let arr1 = shadowCopy(arr)
function shadowCopy(src){
    let result = Array.isArray(src)?[]:{}
    for(let key in src){
        result[key] = src[key]
    }
    return result
}

//深拷贝
//使用递归实现深拷贝
function deepCopy(src){
    let result = Array.isArray(src)?[]:{}
    for(let key in src){
        if(typeof src[key]==='object' && src[key] !== null) {
            result[key] = deepCopy(src[key])
        }else {
            result[key] = src[key]
        }
    }
    return result
}
let arr = [3,4,5,[6,7]]
let arr1 = deepCopy(arr)

//for of和for in

//正则表达式
//字符匹配
let reg = /jirengu/
reg.test('hello jirengu')
//范围匹配
[abcd]//匹配一个字符，是abcd中的任意一个
[0-9]//匹配一个是0-9的数字
[a-zA-Z]//匹配一个不限制大小写的字母
[^abc]//表示一个不是字符a或b或c的字符
//预定义匹配
.//等价于[^\r\n],匹配一个除回车和换行以外的任意字符
\d//等价于[0-9]，匹配一个数字字符
\D//等价于[^0-9],匹配一个非数字字符
\s//等价于[空格\t\n\r\v\f],匹配一个空白字符
\S//等价于[^空格\t\n\r\v\f],匹配非一个空白字符
\w//等价于[a-zA-z_0-9],匹配一个字母，数字，下划线
\W//等价于[^a-zA-z_0-9],匹配一个非字母，数字，下划线
//量词
//匹配0到多个
?//前面的字符出现0次或者一次
+//前面的字符出现1次或者多次
*//前面的字符出现0次或者多次
{n}//前面的字符出现n次
{n,m}//前面的字符出现n到m次
{n,}//前面的字符至少出现n次

//边界
//以...开头或者以...结尾
/^xyz/ //以xyz开头
/abc$/ //以abc结尾
/\babc\b/ //匹配是单词的abc
/\Babc\B/ //匹配不是单词的abc

//实例

//贪婪模式，分组，前瞻，用法




//定时器
//setTimeout(延时器)||clearTimeout（清除延时）
//指定某个函数或代码在多少毫秒之后执行
console.log(1)
var timer = setTimeout(()=>{
    console.log('hello world')
},2000)
console.log(2) //输出结果，先输出1，2，两秒之后输出hello world

//设置间隔
//setInterval(间隔器)||clearInterval（清除间隔）
console.log(1)
var timer = setInterval(()=>{
    console.log('hello world')
},2000)
console.log(2) //输出结果，先输出1，2，每次间隔两秒之后输出hello world



//任务队列



//面向对象编程
//三种方式创建对象
//字面量方式
let dog = {
    name:'heyu',
    sayhello(){
        console.log('hello')
    },
    sayName:function(){
        console.log(`我的名字是${this.name}`)
    }
}
dog.name

//构造函数方式
function Dog(color){
    this.color = color
    this.sayHello=function(){
        console.log(`颜色${this.color}`)
    }
}
let dog1 = new Dog('bule')
dog1.sayHello()

//ES6的语法
class Dog1 {
    constructor(color){
        this.color = color
    }
    sayColor(){
        console.log(`我的颜色时${this.color}`)
    }
}
let dog2 = new Dog1('red')
dog2.sayColor()

//任何函数都有prototype的属性，当使用new创建对象时，对象都有__proto__属性，都指向该函数的prototype
//当使用对象的属性时，先从自有属性找，找不到再从__proto__里找


//闭包
//闭包就是在一个函数里面返回另一个函数，并且在函数被返回的函数中需要用到它上级函数中的变量
function Counter(){
    let num = 0
    function add(){
        num++
        console.log(num)
    }
    return add
}

let addone = new Counter()
addone() 

//DOM
日常用的对象都是Window的属性

navigator(浏览器信息)
Useragent(用户代理)可以通过Useragent得到当前用户的设备来源或者判断用户使用的是安卓or苹果
const isIphne = () => /iphone/i.test(navigator.Useragent)
const isIOS = () =>/iphone|ipad/i.test(navigator.Useragent)

screen(屏幕信息)
screen.width屏幕宽度
screen.width屏幕高度
screen.orientation屏幕旋转

//尺寸
document.docymentElenment.offsetHeight页面文档高度
screen.height屏幕高度
document.documentElement.clienHeight视窗高度
window.innerHeight视窗高度
window.scrollY当前页面滚动距离
document.documentElement.scrollTop当前页面滚动距离

//位置
element.offsetParent距离自己最近的定位元素的祖先元素
element.offsetTop到距离最近的是定位元素的祖先元素的距离
element.getBoundingClientRect()获取元素在视窗中的位置
element.getBoundingClientRect().top + document.body.scrollTop元素距离页面顶部的距离
const isShow = node => 

//滚动

//cookie session localStroage
cookie:存储浏览器上的小段数据，用来记录某些信息。
cookie可以使用js在浏览器直接设置(记录不敏感信息)，也可以在服务端通过HTTP协议的set-cookie让浏览器
种下cookie
在浏览器请求头(requestHeader)会带上cookie
cooie只有4k

session:创建session后，会把关联的session_id通过SetCookie添加到响应头中


localStorage:用于将大量的数据存储在浏览器中，保存后不会失效过期，大小为5m，不参与网络传输



 //TCP/IP四层模型
 客户端不一定是浏览器，浏览器一定是客户端

应用层：遵循某种规则的协议
    1.HTTP（80端口），主要用于普通浏览。
    2.HTTPS（443端口）,HTTP协议的安全版本。
    3.FTP（20和21端口），由名知义，用于文件传输。
    4.POP3（110端口），收邮件用。
    5.SMTP（25端口），用来发送电子邮件。
    6.SSH（22端口），用于加密安全登陆用。
    运行在UDP协议上的协议：
        1.DHCP（67端口，动态主机配置协议），动态配置IP地址。
    其他：
        1.DNS（Domain Name Service，域名服务），用于完成地址查找，邮件转发等工作（运行在TCP和UDP协议上）。
        2.SNMP（Simple Network Management Protocol，简单网络管理协议），用于网络信息的收集和网络管理。
        3.ARP（Address Resolution Protocol，地址解析协议），用于动态解析以太网硬件的地址。

传输层:
    定义:解决诸如端到端可靠性（数据是否已经到达目的地？）和保证数据按照正确的顺序到达这样的问题。TCP、UDP都是传输层协议。
三步握手，四步挥手。TCP可靠的的传输层通信协议，UDP不可靠的传输层协议

网络层:
    定义:解决在一个单一网络上传输数据包的问题。IP协议是网络层协议。

数据链路层:
    定义:它是数据包从一个设备的网络层传输到另外一个设备的网络层的方法。这个过程能够在网卡的软件驱动程序中控制或者专用芯片中控制。
    这将完成如添加报头准备发送、通过实体介质实际发送这样一些数据链路功能。另一端，链路层将完成数据帧接收、去除报头并且将接收到的包传到网络层。

三步握手:

四步挥手:


